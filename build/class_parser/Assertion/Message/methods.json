[{"filepath": "/Users/albertodugo/PycharmProjects/Assertion/classes/message.py", "method_identifier": "__init__", "class_identifier": "Message", "method_full_text": "def __init__(self, message: str = \"\", orario: orario = orario(0, 0)):\n        self.message = message\n        self.orario = orario"}, {"filepath": "/Users/albertodugo/PycharmProjects/Assertion/classes/message.py", "method_identifier": "get_message", "class_identifier": "Message", "method_full_text": "def get_message(self):\n        return Message(self.message, self.orario)"}, {"filepath": "/Users/albertodugo/PycharmProjects/Assertion/classes/message.py", "method_identifier": "get_text", "class_identifier": "Message", "method_full_text": "def get_text(self):\n        return self.message"}, {"filepath": "/Users/albertodugo/PycharmProjects/Assertion/classes/message.py", "method_identifier": "set_message", "class_identifier": "Message", "method_full_text": "def set_message(self, message: str, orario: orario):\n        self.message = message\n        self.orario = orario"}, {"filepath": "/Users/albertodugo/PycharmProjects/Assertion/classes/message.py", "method_identifier": "clear_message", "class_identifier": "Message", "method_full_text": "def clear_message(self):\n        self.message = \"\"\n        self.orario = orario(0, 0)"}, {"filepath": "/Users/albertodugo/PycharmProjects/Assertion/classes/message.py", "method_identifier": "reverse_message", "class_identifier": "Message", "method_full_text": "def reverse_message(self):\n        self.message = self.message[::-1]\n        return self.message"}, {"filepath": "/Users/albertodugo/PycharmProjects/Assertion/classes/message.py", "method_identifier": "count_words", "class_identifier": "Message", "method_full_text": "def count_words(self):\n        return len(self.message.split())"}, {"filepath": "/Users/albertodugo/PycharmProjects/Assertion/classes/message.py", "method_identifier": "is_empty", "class_identifier": "Message", "method_full_text": "def is_empty(self):\n        return len(self.message) == 0 or self.message.isspace() or self.orario.get_orario() == (0, 0)"}, {"filepath": "/Users/albertodugo/PycharmProjects/Assertion/classes/message.py", "method_identifier": "contains_word", "class_identifier": "Message", "method_full_text": "def contains_word(self, word):\n        return word in self.message"}, {"filepath": "/Users/albertodugo/PycharmProjects/Assertion/classes/message.py", "method_identifier": "uppercase_message", "class_identifier": "Message", "method_full_text": "def uppercase_message(self):\n        self.message = self.message.upper()\n        return self.message"}, {"filepath": "/Users/albertodugo/PycharmProjects/Assertion/classes/message.py", "method_identifier": "lowercase_message", "class_identifier": "Message", "method_full_text": "def lowercase_message(self):\n        self.message = self.message.lower()\n        return self.message"}, {"filepath": "/Users/albertodugo/PycharmProjects/Assertion/classes/message.py", "method_identifier": "replace_word", "class_identifier": "Message", "method_full_text": "def replace_word(self, old_word, new_word):\n        self.message = self.message.replace(old_word, new_word)\n        return self.message"}, {"filepath": "/Users/albertodugo/PycharmProjects/Assertion/classes/message.py", "method_identifier": "capitalize_words", "class_identifier": "Message", "method_full_text": "def capitalize_words(self):\n        self.message = \" \".join(word.capitalize() for word in self.message.split())\n        return self.message"}]